/*
TODO
Special ship number, arrival condition, space objects.
.brf file support
.tie file support
*/

function structSize(struct) {
	var size = 0;
	for (var prop in struct.tree) {
		if (struct.tree.hasOwnProperty(prop)) {
			switch(struct.tree[prop]) {
				case 'string:16':
					size+=16;
				break;
				case 'string:64':
					size+=64;
				break;
				case 'uint16':
					size+=2;
				break;
			}
		}
	}

	return size;
}

function isset(item) {
	if (item>=0 && item!=65535) {
		return true;
	}
	return false;
}

var _ = require('./../c-struct/lib/cstruct');
var Buffer = require('./../buffer/index').Buffer;

var headerSchema = new _.Schema({
	version: _.type.uint16,
	mission_time_limit: _.type.uint16,
  end_event: _.type.uint16,
	unknown1: _.type.uint16,
	mission_location: _.type.uint16,
	completion_msg_1: _.type.string(64),
	completion_msg_2: _.type.string(64),
	completion_msg_3: _.type.string(64),
	number_of_flight_groups: _.type.uint16,
	number_of_objects: _.type.uint16
});

var flightGroupSchema = new _.Schema({
	designation: _.type.string(16),
	cargo: _.type.string(16),
	special_cargo: _.type.string(16),
	special_ship_number: _.type.uint16,
	flight_group_type: _.type.uint16,
	craft_iff: _.type.uint16,
	craft_status: _.type.uint16,
	number_in_wave: _.type.uint16,
	number_of_waves: _.type.uint16,
	arrival_event: _.type.uint16,
	arrival_delay: _.type.uint16,
	arrival_flight_group: _.type.uint16,
	mothership: _.type.uint16,
	arrive_by_hyperspace: _.type.uint16,
	depart_by_hyperspace: _.type.uint16,
	start1_x: _.type.uint16,
	wp1_x: _.type.uint16,
	wp2_x: _.type.uint16,
	wp3_x: _.type.uint16,
	start2_x: _.type.uint16,
	start3_x: _.type.uint16,
	hyp_x: _.type.uint16,
	start1_y: _.type.uint16,
	wp1_y: _.type.uint16,
	wp2_y: _.type.uint16,
	wp3_y: _.type.uint16,
	start2_y: _.type.uint16,
	start3_y: _.type.uint16,
	hyp_y: _.type.uint16,
	start1_z: _.type.uint16,
	wp1_z: _.type.uint16,
	wp2_z: _.type.uint16,
	wp3_z: _.type.uint16,
	start2_z: _.type.uint16,
	start3_z: _.type.uint16,
	hyp_z: _.type.uint16,
	unknown1: _.type.uint16,
	unknown2: _.type.uint16,
	unknown3: _.type.uint16,
	unknown4: _.type.uint16,
	unknown5: _.type.uint16,
	unknown6: _.type.uint16,
	unknown7: _.type.uint16,
	formation: _.type.uint16,
	player_pos: _.type.uint16,
	craft_ai: _.type.uint16,
	order: _.type.uint16,
	dock_time_or_throttle: _.type.uint16,
	craft_color: _.type.uint16,
	unknown8: _.type.uint16,
	objective: _.type.uint16,
	primary_target: _.type.uint16,
	secondary_target: _.type.uint16
});

var flightGroupType = [
	'None',
	'X-Wing',
	'Y-Wing',
	'A-Wing',
	'TIE Fighter',
	'TIE Interceptor',
	'TIE Bomber',
	'Gunboat',
	'Transport',
	'Shuttle',
	'Tug',
	'Container',
	'Freighter',
	'Calamari_Cruiser',
	'Nebulon-B Frigate',
	'Corellian Corvette',
	'Imperial Star Destroyer',
	'TIE Advanced',
	'B-Wing'
];

var craftIFF = [
	'default',
	'rebel',
	'imperial',
	'neutral'
];

var craftStatus = [
	'normal',
	'no_missiles',
	'half_missiles',
	'no_shields'
];

var arrivalEvent = [
	'mission_start',
	'afg_arrives',
	'afg_destroyed',
	'afg_attacked',
	'afg_boarded',
	'afg_identified',
	'afg_disabled'
];

var formation = [
	'Vic',
	'Finger_Four',
	'Line_Astern',
	'Line_Abreast',
	'Echelon_Right',
	'Echelon_Left',
	'Double_Astern',
	'Diamond',
	'Stacked',
	'Spread',
	'Hi_Lo',
	'Spiral'
];

var craftAI = [
	'Rookie',
	'Officer',
	'Veteran',
	'Ace',
	'Top_Ace'
];

var order = [
	'Hold_Steady',
	'Fly_Home',
	'Circle_And_Ignore',
	'Fly_Once_And_Ignore',
	'Circle_And_Evade',
	'Fly_Once_And_Evade',
	'Close_Escort',
	'Loose_Escort',
	'Attack_Escorts',
	'Attack_Pri_And_Sec_Targets',
	'Attack_Enemies',
	'Rendezvous',
	'Disabled',
	'Board_To_Deliver',
	'Board_To_Take',
	'Board_To_Exchange',
	'Board_To_Capture',
	'Board_To_Destroy',
	'Disable_Pri_And_Sec_Targets',
	'Disable_All',
	'Attack_Transports',
	'Attack_Freighters',
	'Attack_Starships',
	'Attack_Satelites_And_Mines',
	'Disable_Frieghters',
	'Disable_Starships',
	'Starship_Sit_And_Fire',
	'Starship_Fly_Dance',
	'Starship_Circle',
	'Starship_Await_Return',
	'Starship_Await_Launch',
	'Starship_Await_Boarding'
];

var craftColor = [
	'Red',
	'Gold',
	'Blue'
];

var objective = [
	'None',
	'All_Destroyed',
	'All_Survive',
	'All_Captured',
	'All_Docked',
	'Special_Craft_Destroyed',
	'Special_Craft_Survive',
	'Special_Craft_Captured',
	'Special_Craft_Docked',
	'50_Percent_Destroyed',
	'50_Percent_Survive',
	'50_Percent_Captured',
	'50_Percent_Docked',
	'All_Identified',
	'Special_Craft_Identifed',
	'50_Percent_Identified',
	'Arrive'
];

// register to cache
_.register('Header', headerSchema);
_.register('FlightGroup', flightGroupSchema);


var headerSize = structSize(headerSchema);
var flightGroupSize = structSize(flightGroupSchema);

function downloadXML(xmltext, name) {
	var pos = name.indexOf('.');
	var filename = name.substr(0, pos)+'.xml';
	var pom = document.createElement('a');
	var bb = new Blob([xmltext], {type: 'text/plain'});

	pom.setAttribute('href', window.URL.createObjectURL(bb));
	pom.setAttribute('download', filename);

	pom.dataset.downloadurl = ['text/plain', pom.download, pom.href].join(':');
	pom.draggable = true;
	pom.classList.add('dragout');

	pom.click();
}

function getFile() {
	var file = document.getElementById("file").files[0];
	if (file) {
	    var reader = new FileReader();
	    reader.readAsArrayBuffer(file);
	    reader.onload = function (evt) {
	        convert(evt.target.result, file.name);
	    };
	    reader.onerror = function (evt) {
	        console.log("error reading file");
	    };
	}
}

function convert(buffer, name) {
	//var buffer = document.getElementById('data').value;

	// buffer to object | this can be on another file
	var pos = 0;
	var header = _.unpackSync('Header', new Buffer(buffer.slice(0, headerSize)));
	pos += headerSize;

	var flight_groups = [];
	for (var i = 0; i<header.number_of_flight_groups; i++) {
		var obj = _.unpackSync('FlightGroup', new Buffer(buffer.slice(pos, pos+flightGroupSize)));

		obj.flight_group_type = flightGroupType[obj.flight_group_type];
		obj.craft_iff = craftIFF[obj.craft_iff];
		obj.craft_status = craftStatus[obj.craft_status];
		obj.arrival_event = arrivalEvent[obj.arrival_event];
		obj.formation = formation[obj.formation];
		obj.craft_ai = craftAI[obj.craft_ai];
		obj.order = order[obj.order];
		obj.craft_color = craftColor[obj.craft_color];
		obj.objective = objective[obj.objective];

		flight_groups.push(obj);
		pos += flightGroupSize;
	}

	var xmlString = "<mission></mission>";
	var parser = new DOMParser();
	var xmlDoc = parser.parseFromString(xmlString, "text/xml"); //important to use "text/xml"

	var groupsNode = xmlDoc.createElement("groups");
	var missionNode = xmlDoc.getElementsByTagName("mission")[0];
	missionNode.appendChild(groupsNode);

	var groupNode = xmlDoc.createElement("group");
	groupsNode.appendChild(groupNode);

	// messages
	var messagesNode = xmlDoc.createElement("messages");
	missionNode.appendChild(messagesNode);

	var messageNode;
	var conditionsNode;
	var andNode;
	var conditionNode;
	for (i=1; i<=3; i++) {
		if (header['completion_msg_'+i]) {
			messageNode = xmlDoc.createElement("message");
			messageNode.setAttribute("value", header['completion_msg_'+i]);
			messagesNode.appendChild(messageNode);

			conditionsNode = xmlDoc.createElement("conditions");
			messageNode.appendChild(conditionsNode);

			andNode = xmlDoc.createElement("and");
			conditionsNode.appendChild(andNode);

			conditionNode = xmlDoc.createElement("condition");
			andNode.appendChild(conditionNode);

			conditionNode.setAttribute("priority", "primary");
			conditionNode.setAttribute("success", "success");
		}
	}

	var goalsNode = xmlDoc.createElement("goals");
	missionNode.appendChild(goalsNode);

	var goalNode = xmlDoc.createElement("goal");
	goalNode.setAttribute("priority", "primary");
	goalsNode.appendChild(goalNode);

	goalConditionsNode = xmlDoc.createElement("conditions");
	goalNode.appendChild(goalConditionsNode);

	var goalAndNode = xmlDoc.createElement("and");
	goalConditionsNode.appendChild(goalAndNode);

	flight_groups.forEach(function(item) {
		// main flightgroup node and attributes
		var flightGroupNode = xmlDoc.createElement("flightgroup");
		flightGroupNode.setAttribute("type", item.flight_group_type);
		flightGroupNode.setAttribute("id", item.designation);
		flightGroupNode.setAttribute("name", item.designation);
		flightGroupNode.setAttribute("skill", item.craft_ai);
		flightGroupNode.setAttribute("iff", item.craft_iff);
		flightGroupNode.setAttribute("status", item.craft_status);
		flightGroupNode.setAttribute("color", item.craft_color);
		flightGroupNode.setAttribute("count", item.number_in_wave);
		flightGroupNode.setAttribute("waves", item.number_of_waves);
		flightGroupNode.setAttribute("formation", item.formation);
		flightGroupNode.setAttribute("cargo", item.cargo);
		flightGroupNode.setAttribute("specialcargo", item.special_cargo);
		flightGroupNode.setAttribute("specialcargo", item.special_cargo);
		if (item.player_pos) {
			flightGroupNode.setAttribute("player", item.player_pos);
		}
		groupNode.appendChild(flightGroupNode);

		// mothership
		var mothership;
		if (isset(item.mothership)) {
			mothership = flight_groups[item.mothership].designation;
		}

		// arrival node
		var arrivalNode = xmlDoc.createElement("arrival");
		if (item.arrival_delay) {
			arrivalNode.setAttribute("delay", item.arrival_delay);
		}

		var arrivalMethod;
		if (item.arrive_by_hyperspace) {
			arrivalMethod = 'hyperspace';
		} else if (isset(item.mothership)) {
			arrivalMethod = 'mothership';
			arrivalNode.setAttribute("identifier", mothership);
		}

		if (arrivalMethod) {
			arrivalNode.setAttribute("method", arrivalMethod);
		}

		flightGroupNode.appendChild(arrivalNode);

		// departure node
		var departureNode = xmlDoc.createElement("departure");

		var departureMethod;
		if (item.depart_by_hyperspace) {
			departureMethod = 'hyperspace';
		} else if (item.mothership) {
			departureMethod = 'mothership';
			departureNode.setAttribute("identifier", mothership);
		}

		if (departureMethod) {
			departureNode.setAttribute("method", departureMethod);
		}

		flightGroupNode.appendChild(departureNode);

		// waypoints
		var waypointsNode = xmlDoc.createElement("waypoints");
		flightGroupNode.appendChild(waypointsNode);

		var waypointNode;

		// start waypoints
		for(i=1; i<=3; i++) {
			if (item['start'+i+'_x'] || item['start'+i+'_y'] || item['start'+i+'_z']) {
				waypointNode = xmlDoc.createElement("waypoint");
				waypointNode.setAttribute("type", "start");
				waypointNode.setAttribute("x", item['start'+i+'_x']);
				waypointNode.setAttribute("y", item['start'+i+'_y']);
				waypointNode.setAttribute("z", item['start'+i+'_z']);
				waypointsNode.appendChild(waypointNode);
			}
		}

		// regular waypoints
		for(i=1; i<=3; i++) {
			if (item['wp'+i+'_x'] || item['wp'+i+'_y'] || item['wp'+i+'_z']) {
				waypointNode = xmlDoc.createElement("waypoint");
				waypointNode.setAttribute("x", item['wp'+i+'_x']);
				waypointNode.setAttribute("y", item['wp'+i+'_y']);
				waypointNode.setAttribute("z", item['wp'+i+'_z']);
				waypointsNode.appendChild(waypointNode);
			}
		}

		// hyperspace waypoints
		for(i=1; i<=3; i++) {
			if (item['hyp'+i+'_x'] || item['hyp'+i+'_y'] || item['hyp'+i+'_z']) {
				waypointNode = xmlDoc.createElement("waypoint");
				waypointNode.setAttribute("type", "hyperspace");
				waypointNode.setAttribute("x", item['hyp'+i+'_x']);
				waypointNode.setAttribute("y", item['hyp'+i+'_y']);
				waypointNode.setAttribute("z", item['hyp'+i+'_z']);
				waypointsNode.appendChild(waypointNode);
			}
		}

		// orders
		var ordersNode = xmlDoc.createElement("orders");
		flightGroupNode.appendChild(ordersNode);

		var orderNode;
		if (item.order) {
			orderNode = xmlDoc.createElement("order");
			orderNode.setAttribute("type", item.order);

			if (isset(item.primary_target)) {
				orderNode.setAttribute("priority", "primary");
				orderNode.setAttribute("identifier", flight_groups[item.primary_target].designation);
			}
			ordersNode.appendChild(orderNode);

			if (isset(item.secondary_target)) {
				orderNode = xmlDoc.createElement("order");
				orderNode.setAttribute("type", item.order);
				orderNode.setAttribute("priority", "secondary");
				orderNode.setAttribute("identifier", flight_groups[item.secondary_target].designation);
			}
			ordersNode.appendChild(orderNode);
		}

		// goals
		if (item.objective!='None') {
			conditionNode = xmlDoc.createElement("condition");
			goalAndNode.appendChild(conditionNode);

			conditionNode.setAttribute("identifier", item.designation);
			conditionNode.setAttribute("action", item.objective);
		}
	});

	var serializer = new XMLSerializer();
	xmlString = serializer.serializeToString(xmlDoc);

	downloadXML(xmlString, name);
}

document.getElementById('file').addEventListener('change', getFile);
